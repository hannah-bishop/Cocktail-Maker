// <auto-generated />
using System;
using Cocktails;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(CocktailsContext))]
    partial class CocktailsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cocktails.Models.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("Cocktails.Models.AllergenIngredient", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("AllergenId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("AllergenIngredient");
                });

            modelBuilder.Entity("Cocktails.Models.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Alcoholic")
                        .HasColumnType("bit");

                    b.Property<int?>("GlassId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GlassId");

                    b.ToTable("Cocktails");
                });

            modelBuilder.Entity("Cocktails.Models.CocktailIngredient", b =>
                {
                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredient");
                });

            modelBuilder.Entity("Cocktails.Models.Glass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Glasses");
                });

            modelBuilder.Entity("Cocktails.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Cocktails.Models.AllergenIngredient", b =>
                {
                    b.HasOne("Cocktails.Models.Allergen", "Allergen")
                        .WithMany("AllergenIngredient")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.Models.Ingredient", "Ingredient")
                        .WithMany("AllergenIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Cocktails.Models.Cocktail", b =>
                {
                    b.HasOne("Cocktails.Models.Glass", "Glass")
                        .WithMany("Cocktails")
                        .HasForeignKey("GlassId");

                    b.Navigation("Glass");
                });

            modelBuilder.Entity("Cocktails.Models.CocktailIngredient", b =>
                {
                    b.HasOne("Cocktails.Models.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredient")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.Models.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Cocktails.Models.Allergen", b =>
                {
                    b.Navigation("AllergenIngredient");
                });

            modelBuilder.Entity("Cocktails.Models.Cocktail", b =>
                {
                    b.Navigation("CocktailIngredient");
                });

            modelBuilder.Entity("Cocktails.Models.Glass", b =>
                {
                    b.Navigation("Cocktails");
                });

            modelBuilder.Entity("Cocktails.Models.Ingredient", b =>
                {
                    b.Navigation("AllergenIngredient");

                    b.Navigation("CocktailIngredient");
                });
#pragma warning restore 612, 618
        }
    }
}
